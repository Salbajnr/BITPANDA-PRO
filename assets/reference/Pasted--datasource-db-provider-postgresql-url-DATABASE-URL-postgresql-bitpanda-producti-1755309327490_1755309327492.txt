
datasource db {
  provider = "postgresql"
  url      = DATABASE_URL("postgresql://bitpanda_production_user:q2hpL8cEuCHCCbtRU969f10PTzAvCyRe@dpg-d2eurker433s738hnht0-a.oregon-postgres.render.com/bitpanda_production")
}

// ---------- Enums ----------
enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum DepositStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  INFO
  SUCCESS
  ERROR
  WARNING
}

enum FileKind {
  AVATAR
  DEPOSIT_PROOF
  ANNOUNCEMENT_ASSET
  OTHER
}

enum LedgerEntryType {
  DEPOSIT_APPROVED
  WITHDRAWAL
  TRADE_PNL
  ADMIN_ADJUSTMENT
  TRANSFER
}

enum PositionSide {
  LONG
  SHORT
}

enum PositionStatus {
  OPEN
  CLOSED
}

enum TradeSide {
  BUY
  SELL
}

enum TicketStatus {
  OPEN
  RESOLVED
  CLOSED
}

enum AdminActionType {
  APPROVE_DEPOSIT
  REJECT_DEPOSIT
  ADJUST_BALANCE
  CREATE_ANNOUNCEMENT
  UPDATE_ANNOUNCEMENT
  DELETE_ANNOUNCEMENT
  MANAGE_USER
  MANAGE_NEWS_SOURCE
}

// ---------- Core ----------
model User {
  id               String        @id @default(uuid())
  email            String        @unique
  name             String?
  username         String?       @unique
  passwordHash     String
  role             Role          @default(USER)
  status           UserStatus    @default(ACTIVE)
  twoFactorEnabled Boolean       @default(false)
  avatarFileId     String?
  avatarFile       File?         @relation("UserAvatar", fields: [avatarFileId], references: [id], onDelete: SetNull)

  // Auth/session
  sessions         Session[]
  emailTokens      EmailVerificationToken[]
  passwordTokens   PasswordResetToken[]

  // Finance
  wallet           Wallet?
  deposits         Deposit[]
  adjustments      AdminAdjustment[] @relation("AdjustmentAdmin")

  // Comms
  notifications    Notification[]
  announcements    Announcement[]    @relation("AnnouncementAuthor")
  tickets          SupportTicket[]

  // Admin logs
  adminAuditLogs   AdminAuditLog[]   @relation("AuditAdmin")

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([role])
  @@index([status])
}

model Session {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  refreshToken String  @unique
  userAgent  String?
  ip         String?
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

model EmailVerificationToken {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  consumedAt DateTime?
}

model PasswordResetToken {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  consumedAt DateTime?
}

// ---------- Files (for proofs, avatars, etc.) ----------
model File {
  id           String   @id @default(uuid())
  kind         FileKind
  url          String   // e.g., S3/GCS URL
  contentType  String
  sizeBytes    Int
  uploadedBy   User?    @relation(fields: [uploadedByUserId], references: [id], onDelete: SetNull)
  uploadedByUserId String?
  createdAt    DateTime @default(now())

  // reverse relations
  depositProofs Deposit[]
}

// ---------- Payment Methods & Deposits ----------
model PaymentMethod {
  id          String   @id @default(uuid())
  name        String   @unique       // e.g., "Binance", "Bybit"
  logoUrl     String?
  websiteUrl  String   // official deposit page
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  deposits    Deposit[]
}

model Deposit {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  paymentMethod    PaymentMethod  @relation(fields: [paymentMethodId], references: [id], onDelete: Restrict)
  paymentMethodId  String

  // What the user claims they sent externally
  assetSymbol      String                           // e.g., BTC, USDT, ETH
  network          String?                          // e.g., TRON, ERC20
  txHash           String?                          @unique
  amountAsset      Decimal        @db.Decimal(38,18)

  // Proof (file or hash/receipt)
  proofFileId      String?
  proofFile        File?          @relation(fields: [proofFileId], references: [id], onDelete: SetNull)
  externalReceipt  String?        // optional text reference

  // How much will be credited to the in-app wallet (base currency, e.g., USDT)
  creditedAmount   Decimal?       @db.Decimal(38,18)
  creditedCurrency String         @default("USDT")  // base currency symbol

  status           DepositStatus  @default(PENDING)

  // Admin moderation fields
  moderatedById    String?
  moderatedBy      User?          @relation("DepositModerator", fields: [moderatedById], references: [id], onDelete: SetNull)
  adminNote        String?
  approvedAt       DateTime?
  rejectedAt       DateTime?

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Ledger back-reference
  ledgerEntries    LedgerEntry[]

  @@index([userId, status, createdAt])
  @@index([paymentMethodId, status])
}

// ---------- Wallets & Ledger ----------
model Wallet {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String        @unique

  baseCurrency   String        @default("USDT")
  balance        Decimal       @db.Decimal(38,18) @default(0)

  ledger         LedgerEntry[]
  positions      Position[]
  trades         Trade[]
  adjustments    AdminAdjustment[]

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model LedgerEntry {
  id              String          @id @default(uuid())
  wallet          Wallet          @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId        String
  type            LedgerEntryType
  amountDelta     Decimal         @db.Decimal(38,18) // positive or negative
  balanceAfter    Decimal         @db.Decimal(38,18)
  note            String?

  // Optional linkage to origin objects
  deposit         Deposit?        @relation(fields: [depositId], references: [id], onDelete: SetNull)
  depositId       String?
  trade           Trade?          @relation(fields: [tradeId], references: [id], onDelete: SetNull)
  tradeId         String?
  adjustment      AdminAdjustment? @relation(fields: [adjustmentId], references: [id], onDelete: SetNull)
  adjustmentId    String?

  createdAt       DateTime        @default(now())

  @@index([walletId, createdAt])
  @@index([depositId])
  @@index([tradeId])
}

// Manual admin adjustments (credits/debits)
model AdminAdjustment {
  id          String     @id @default(uuid())
  wallet      Wallet     @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId    String
  admin       User       @relation("AdjustmentAdmin", fields: [adminId], references: [id], onDelete: Restrict)
  adminId     String
  amount      Decimal    @db.Decimal(38,18) // positive or negative
  reason      String?
  createdAt   DateTime   @default(now())

  ledgerEntries LedgerEntry[]
}

// ---------- Simulated Futures (markets, positions, trades) ----------
model MarketSymbol {
  id          String   @id @default(uuid())
  symbol      String   @unique        // e.g., BTCUSDT
  baseAsset   String   // BTC
  quoteAsset  String   // USDT
  tickSize    Decimal  @db.Decimal(38,18) @default(0.01)
  stepSize    Decimal  @db.Decimal(38,18) @default(0.0001)
  minNotional Decimal  @db.Decimal(38,18) @default(5)

  prices      MarketPriceCache[]
  positions   Position[]
  trades      Trade[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MarketPriceCache {
  id         String       @id @default(uuid())
  market     MarketSymbol @relation(fields: [marketId], references: [id], onDelete: Cascade)
  marketId   String       @unique
  price      Decimal      @db.Decimal(38,18)
  source     String?
  asOf       DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Position {
  id            String        @id @default(uuid())
  wallet        Wallet        @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId      String
  market        MarketSymbol  @relation(fields: [marketId], references: [id], onDelete: Restrict)
  marketId      String
  side          PositionSide
  leverage      Int           @default(5)
  sizeBase      Decimal       @db.Decimal(38,18) // quantity in base asset
  entryPrice    Decimal       @db.Decimal(38,18)
  marginUsed    Decimal       @db.Decimal(38,18)
  status        PositionStatus @default(OPEN)
  pnlRealized   Decimal       @db.Decimal(38,18) @default(0)
  openedAt      DateTime      @default(now())
  closedAt      DateTime?

  trades        Trade[]

  @@index([walletId, status])
  @@index([marketId, status])
}

model Trade {
  id           String        @id @default(uuid())
  wallet       Wallet        @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId     String
  position     Position?     @relation(fields: [positionId], references: [id], onDelete: SetNull)
  positionId   String?
  market       MarketSymbol  @relation(fields: [marketId], references: [id], onDelete: Restrict)
  marketId     String
  side         TradeSide
  qtyBase      Decimal       @db.Decimal(38,18)
  price        Decimal       @db.Decimal(38,18)
  fee          Decimal       @db.Decimal(38,18) @default(0)
  createdAt    DateTime      @default(now())

  ledgerEntries LedgerEntry[]

  @@index([walletId, createdAt])
  @@index([marketId, createdAt])
}

// ---------- Announcements, News, Notifications ----------
model Announcement {
  id          String   @id @default(uuid())
  title       String
  body        String
  author      User?    @relation("AnnouncementAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  authorId    String?
  isActive    Boolean  @default(true)
  publishedAt DateTime @default(now())
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model NewsSource {
  id           String   @id @default(uuid())
  name         String
  rssUrl       String   @unique
  isActive     Boolean  @default(true)
  lastFetchedAt DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  title     String
  body      String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@index([userId, isRead, createdAt])
}

// ---------- Support / Contact ----------
model SupportTicket {
  id         String     @id @default(uuid())
  user       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  email      String
  subject    String
  message    String
  status     TicketStatus @default(OPEN)
  createdAt  DateTime    @default(now())
  resolvedAt DateTime?
}

// ---------- Admin Auditing & Settings ----------
model AdminAuditLog {
  id          String          @id @default(uuid())
  admin       User            @relation("AuditAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  adminId     String
  action      AdminActionType
  targetUser  User?           @relation(fields: [targetUserId], references: [id], onDelete: SetNull)
  targetUserId String?
  deposit     Deposit?        @relation(fields: [depositId], references: [id], onDelete: SetNull)
  depositId   String?
  meta        Json?
  createdAt   DateTime        @default(now())

  @@index([adminId, createdAt])
  @@index([depositId])
  @@index([targetUserId])
}

model Setting {
  key        String  @id
  value      Json
  updatedAt  DateTime @updatedAt
}